function [data, structReturn] = loadDemographics(workbookFile, subjectNums_S, sheetName, RANGE,subjectNums_R)
%IMPORTFILE Import data from a spreadsheet
%   DATA = IMPORTFILE(FILE) reads data from the first worksheet in the
%   Microsoft Excel spreadsheet file named FILE and returns the data as a
%   cell array.
%
%   DATA = IMPORTFILE(FILE,SHEET) reads from the specified worksheet.
%
%   DATA = IMPORTFILE(FILE,SHEET,RANGE) reads from the specified worksheet
%   and from the specified RANGE. Specify RANGE using the syntax
%   'C1:C2',where C1 and C2 are opposing corners of the region.%
% Example:
%   DemographicInformation = importfile('DemographicInformation.xlsx','Sheet1','A2:E22');
%
%   See also XLSREAD.

% Auto-generated by MATLAB on 2017/08/16 17:09:08

%% Input handling

% If no sheet is specified, read first sheet
if ~exist('sheetName','var') || isempty(sheetName)
    sheetName = 1;
end

% If no RANGE is specified, read all data
if ~exist('RANGE','var') || isempty(RANGE)
    RANGE = '';
end

%% Import the data
[~, ~, data] = xlsread(workbookFile, sheetName, RANGE);
data(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),data)) = {''};

%% trim bottom if there is extra stuff
subCol = 0 ;
for i = 1: size(data,1)
    if isempty(data{i,1})
        subCol = i ;
        data = data(1:subCol-1,:) ;
        break
    end
end


%% Spit out Group Vs. Subject vector
subjectRow = find(contains(data(1,:),'Subject'),1) ;
structReturn.subject = cell2mat(data(2:end,subjectRow)) ;
groupRow = strmatch('Group',data(1,:)) ;
structReturn.group = data(2:end,groupRow) ;
wspeedRow = strmatch('walking speed',data(1,:)) ;
structReturn.walkingSpeed = cell2mat(data(2:end,wspeedRow)) ;
genderRow = strmatch('gender',data(1,:)) ;
KLRow = strmatch('KL',data(1,:)) ;
ageRow = strmatch('age',data(1,:)) ;
BMIRow = strmatch('BMI',data(1,:)) ;
kneeRow = strmatch('Knee',data(1,:)) ;
structReturn.gender = data(2:end,genderRow) ;
structReturn.KL = cell2mat(data(2:end,KLRow)) ;
structReturn.age = round(cell2mat(data(2:end,ageRow)));
structReturn.BMI = cell2mat(data(2:end,BMIRow));
structReturn.knee = cell2mat(data(2:end,kneeRow));

structReturn.inds.control = find(strcmp(structReturn.group,'C')) ;
structReturn.inds.intervention = find(strcmp(structReturn.group,'I')) ;
structReturn.controls = structReturn.subject(structReturn.inds.control) ;
structReturn.intervention = structReturn.subject(structReturn.inds.intervention) ;

isSpecRsubs = exist('subjectNums_R','var') && length(subjectNums_R)>0;
isSpecSsubs = exist('subjectNums_S','var') && length(subjectNums_S)>0;


if isSpecRsubs && isSpecSsubs;
    error('In demographics loader, R and S subjects specified')
end
if isSpecSsubs
    subjectsSelected = subjectNums_S ;
end
if isSpecRsubs
    subjectsSelected = subjectNums_R ;
end
    

% If asked for specific subjects
if exist('subjectsSelected','var') 
    nSubs = length(structReturn.subject) ;
    % structReturn.subject = xor(ones(1,nSubs), ismember(min(structReturn.subject):max(structReturn.subject),subjectNums)) ; % trials to be excluded
    subInds = arrayfun(@(x) find(structReturn.subject==x),subjectsSelected) ;
    structReturn.subject = structReturn.subject(subInds) ;
    structReturn.group = structReturn.group(subInds) ;
    structReturn.gender = structReturn.gender(subInds) ;
    structReturn.inds.control = find(strcmp(structReturn.group,'C')) ;
    structReturn.inds.intervention = find(strcmp(structReturn.group,'I')) ;
    structReturn.controls = structReturn.subject(structReturn.inds.control) ;
    structReturn.intervention = structReturn.subject(structReturn.inds.intervention) ;
    structReturn.KL = structReturn.KL(subInds) ;
    structReturn.age = structReturn.age(subInds);
    structReturn.BMI = structReturn.BMI(subInds);
    structReturn.knee = structReturn.knee(subInds); 
    structReturn.walkingSpeed = structReturn.walkingSpeed(subInds) ;
end


%% Get Alignment for both legs
%% Input handling

RANGE = '';

%% Import the data
[~, ~, data] = xlsread(workbookFile, 'XrayAlignment', RANGE);
data(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),data)) = {''};
data = data(1:find(cellfun('isempty',(data(:,1)))==0,1,'last'),:) ;
%% Split out Group Vs. Subject vector
colNum = strmatch('Subject number',data(1,:)) ;
structReturn.Alignment.all.Snum = cell2mat(repEmptyNan(data(2:end,colNum))) ;
colNum = strmatch('R num',data(1,:)) ;
structReturn.Alignment.all.Rnum = cellfun(@str2num,removeR(data(2:end,colNum)))' ;
colNum = strmatch('Right',data(1,:)) ;
structReturn.Alignment.all.valgus_r = cell2mat(repEmptyNan(data(2:end,colNum))) ;
structReturn.Alignment.all.sign = 'Valgus is positive' ;
colNum = strmatch('Left',data(1,:)) ;
structReturn.Alignment.all.valgus_l = cell2mat(repEmptyNan(data(2:end,colNum))) ;


% If asked for specific subjects
if exist('subjectNums_S','var')
    fx = @(x)find(ismember(structReturn.Alignment.all.Snum,x)) ;
    subInds = cell2mat(repEmptyNan(arrayfun(fx,subjectNums_S,'UniformOutput',false))) ;
    structReturn.Alignment.SnumsRequested.valgus_r = structReturn.Alignment.all.valgus_r(subInds) ;
    structReturn.Alignment.SnumsRequested.valgus_l = structReturn.Alignment.all.valgus_l(subInds) ;
end

structReturn.Alignment.SnumsRequested.valgus_affectedLimb = zeros(size(structReturn.Alignment.SnumsRequested.valgus_r)) ;
for i = 1:length(structReturn.Alignment.SnumsRequested.valgus_r)
    structReturn.Alignment.SnumsRequested.valgus_affectedLimb(i) = structReturn.Alignment.SnumsRequested.(['valgus_' lower(structReturn.knee(i))])(i) ;
end

if exist('subjectNums_R','var')
fx = @(x)find(ismember(structReturn.Alignment.all.Rnum,x)) ;
subInds = cell2mat(repEmptyNan(arrayfun(fx,subjectNums_R,'UniformOutput',false))) ;
for i = 1:length(subInds)
    if isnan(subInds(i)) 
        structReturn.Alignment.RnumsRequested.valgus_r(i) = NaN ;
        structReturn.Alignment.RnumsRequested.valgus_l(i) = NaN ;
    else
        structReturn.Alignment.RnumsRequested.valgus_r(i) = structReturn.Alignment.all.valgus_r(subInds(i)) ;
        structReturn.Alignment.RnumsRequested.valgus_l(i) = structReturn.Alignment.all.valgus_l(subInds(i)) ;
    end
end
end

% Am not currently returning affected leg alignment for Rnums
% structReturn.Alignment.RnumsRequested.valgus_affectedLimb = zeros(size(structReturn.Alignment.RnumsRequested.valgus_r)) ;
% for i = 1:length(structReturn.Alignment.RnumsRequested.valgus_r)
%     structReturn.Alignment.RnumsRequested.valgus_affectedLimb(i) = structReturn.Alignment.RnumsRequested.(['valgus_' lower(structReturn.knee(i))])(i) ;
% end
end

function c = repEmptyNan(myCell)
    fx=@(x)isempty(x) ;
    ind=cellfun(fx,myCell) ;
    c(find(ind))={nan} ;
    c(find(~ind)) = myCell(find(~ind)) ;
end

function c = removeR(myCell)
    fx=@(x)(x(2:end)) ;
    c=cellfun(fx,myCell,'UniformOutput',false) ;
end
